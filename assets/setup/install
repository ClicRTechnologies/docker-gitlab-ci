#!/bin/bash
set -e

GITLAB_CI_VERSION=5.0.1

INSTALL_DIR="/home/gitlab_ci/gitlab-ci"
DATA_DIR="/home/gitlab_ci/data"
SETUP_DIR="/app/setup"
GEM_CACHE_DIR="${SETUP_DIR}/cache"

# add git user
adduser --disabled-login --gecos 'GitLab CI' gitlab_ci

# create the data store
sudo -u gitlab_ci -H mkdir -p ${DATA_DIR}

# shallow clone gitlab-ci
sudo -u gitlab_ci -H git clone -b v${GITLAB_CI_VERSION} --depth 1 \
  https://github.com/gitlabhq/gitlab-ci.git ${INSTALL_DIR}

cd ${INSTALL_DIR}

# copy default configurations
cp lib/support/nginx/gitlab_ci /etc/nginx/sites-available/gitlab_ci
sudo -u gitlab_ci -H cp config/application.yml.example config/application.yml
sudo -u gitlab_ci -H cp config/resque.yml.example config/resque.yml
sudo -u gitlab_ci -H cp config/database.yml.mysql config/database.yml
sudo -u gitlab_ci -H cp config/unicorn.rb.example config/unicorn.rb
sudo -u gitlab_ci -H cp config/initializers/smtp_settings.rb.sample config/initializers/smtp_settings.rb

# create required tmp and log directories
sudo -u gitlab_ci -H mkdir -p tmp/pids/ tmp/sockets/ log/
chmod -R u+rwX log tmp

# create production log
sudo -u gitlab_ci -H touch log/production.log

# rebuild apt cache
apt-get update

# install build dependencies for gem installation
apt-get install -y gcc g++ make libc6-dev ruby-dev \
  libmysqlclient-dev libpq-dev zlib1g-dev libyaml-dev libssl-dev \
  libgdbm-dev libreadline-dev libncurses5-dev libffi-dev \
  libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev

# install gems required by gitlab-ci, use cache if available
if [ -d "${GEM_CACHE_DIR}" ]; then
  mv ${GEM_CACHE_DIR} vendor/
  chown -R gitlab_ci:gitlab_ci vendor/cache
fi
sudo -u gitlab_ci -H bundle install --deployment --without development test

# purge build dependencies
apt-get purge -y --auto-remove gcc g++ make libc6-dev ruby-dev \
  libmysqlclient-dev libpq-dev zlib1g-dev libyaml-dev libssl-dev \
  libgdbm-dev libreadline-dev libncurses5-dev libffi-dev \
  libxml2-dev libxslt-dev libcurl4-openssl-dev libicu-dev

# cleanup
rm -rf /var/lib/apt/lists/*

# install cronjob
bundle exec whenever -w -u gitlab_ci RAILS_ENV=production

# make sure everything in /home/gitlab_ci is owned by the gitlab_ci user
chown -R gitlab_ci:gitlab_ci /home/gitlab_ci/

# install gitlab bootscript
cp lib/support/init.d/gitlab_ci /etc/init.d/gitlab_ci

# disable default nginx configuration and enable gitlab's nginx configuration
rm -f /etc/nginx/sites-enabled/default

# create the /var/run/sshd directory (required for sshd to start)
mkdir -p /var/run/sshd

# configure supervisord to start nginx
echo "daemon off;" >> /etc/nginx/nginx.conf
cat > /etc/supervisor/conf.d/nginx.conf <<EOF
[program:nginx]
priority=20
directory=/tmp
command=/usr/sbin/nginx
user=root
autostart=false
autorestart=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.log
EOF

# configure supervisord to start mysql (manual)
cat > /etc/supervisor/conf.d/mysqld.conf <<EOF
[program:mysqld]
priority=20
directory=/tmp
command=/usr/bin/mysqld_safe
user=root
autostart=false
autorestart=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.log
EOF

# configure supervisord to start redis (manual)
sed 's/daemonize yes/daemonize no/' -i /etc/redis/redis.conf
cat > /etc/supervisor/conf.d/redis-server.conf <<EOF
[program:redis-server]
priority=20
directory=/tmp
command=/usr/bin/redis-server /etc/redis/redis.conf
user=redis
autostart=false
autorestart=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.log
EOF

# configure supervisord to start crond
cat > /etc/supervisor/conf.d/cron.conf <<EOF
[program:cron]
priority=20
directory=/tmp
command=/usr/sbin/cron -f
user=root
autostart=false
autorestart=true
stdout_logfile=/var/log/supervisor/%(program_name)s.log
stderr_logfile=/var/log/supervisor/%(program_name)s.log
EOF
