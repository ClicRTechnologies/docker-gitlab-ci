{"name":"Docker-gitlab-ci","tagline":"Dockerfile to build a GitLab CI container image.","body":"# Table of Contents\r\n- [Introduction](#introduction)\r\n    - [Version](#version)\r\n    - [Changelog](Changelog.md)\r\n- [Supported Web Browsers](#supported-web-browsers)\r\n- [Installation](#installation)\r\n- [Quick Start](#quick-start)\r\n- [Configuration](#configuration)\r\n    - [Database](#database)\r\n        - [MySQL](#mysql)\r\n            - [Internal MySQL Server](#internal-mysql-server)\r\n            - [External MySQL Server](#external-mysql-server)\r\n        - [PostgreSQL]($postgresql)\r\n            - [External PostgreSQL Server](#external-postgresql-server)\r\n    - [Mail](#mail)\r\n    - [Putting it all together](#putting-it-all-together)\r\n    - [Available Configuration Parameters](#available-configuration-parameters)\r\n- [Maintenance](#maintenance)\r\n    - [SSH Login](#ssh-login)\r\n- [Upgrading](#upgrading)\r\n- [References](#references)\r\n\r\n# Introduction\r\nDockerfile to build a GitLab CI container image.\r\n\r\n## Version\r\nCurrent Version: 4.3.0\r\n\r\n# Supported Web Browsers\r\n\r\n- Chrome (Latest stable version)\r\n- Firefox (Latest released version)\r\n- Safari 7+ (Know problem: required fields in html5 do not work)\r\n- Opera (Latest released version)\r\n- IE 10+\r\n\r\n# Installation\r\n\r\nPull the latest version of the image from the docker index. This is the recommended method of installation as it is easier to update image in the future. These builds are performed by the **Docker Trusted Build** service.\r\n\r\n```bash\r\ndocker pull sameersbn/gitlab-ci\r\n```\r\n\r\nStarting from GitLab CI version 4.3.0, You can pull a particular version of GitLab CI by specifying the version number. For example,\r\n\r\n```bash\r\ndocker pull sameersbn/gitlab-ci:4.3.0\r\n```\r\n\r\nAlternately you can build the image yourself.\r\n\r\n```bash\r\ngit clone https://github.com/sameersbn/docker-gitlab-ci.git\r\ncd docker-gitlab-ci\r\ndocker build -t=\"$USER/gitlab-ci\" .\r\n```\r\n\r\n# Quick Start\r\nBefore you can start the GitLab CI image you need to make sure you have a [GitLab](https://www.gitlab.com/) server running. Checkout the [docker-gitlab](https://github.com/sameersbn/docker-gitlab) project for getting a GitLab server up and running.\r\n\r\nYou need to provide the URL of the GitLab server while running GitLab CI using the GITLAB_URL environment configuration. For example if the location of the GitLab server is 172.17.0.2\r\n\r\n```bash\r\ndocker run -name gitlab-ci -d \\\r\n  -e \"GITLAB_URL=http://172.17.0.2\" \\\r\n  sameersbn/gitlab-ci\r\nGITLAB_CI_IP=$(docker inspect gitlab-ci | grep IPAddres | awk -F'\"' '{print $4}')\r\n```\r\n\r\nAlternately, if the GitLab and GitLab CI servers are running on the same host, you can take advantage of docker links. Lets consider that the GitLab server is running on the same host and has the name **\"gitlab\"**, then using docker links:\r\n\r\n```bash\r\ndocker run -name gitlab-ci -d -link gitlab:gitlab sameersbn/gitlab-ci\r\nGITLAB_CI_IP=$(docker inspect gitlab-ci | grep IPAddres | awk -F'\"' '{print $4}')\r\n```\r\n\r\nAccess the GitLab CI server\r\n\r\n```bash\r\nxdg-open \"http://${GITLAB_CI_IP}\"\r\n```\r\n\r\nLogin using your GitLab credentials.\r\n\r\nYou should now have GitLab CI ready for testing. If you want to use GitLab CI for more than just testing then please read the **Advanced Options** section.\r\n\r\n**PS:** You need to install [GitLab CI Runner](https://gitlab.com/gitlab-org/gitlab-ci-runner/blob/master/README.md) if you want to do anything worth while with the GitLab CI server. Please look up github / docker index service for runner containers.\r\n\r\n# Configuration\r\n\r\n## Database\r\nGitLab CI uses a database backend to store its data.\r\n\r\n### MySQL\r\n\r\n#### Internal MySQL Server\r\nThis docker image is configured to use a MySQL database backend. The database connection can be configured using environment variables. If not specified, the image will start a mysql server internally and use it. However in this case, the data stored in the mysql database will be lost if the container is stopped/removed. To avoid this you should mount a volume at /var/lib/mysql.\r\n\r\n```bash\r\nmkdir /opt/gitlab-ci/mysql\r\ndocker run -name gitlab-ci -d \\\r\n  -e \"GITLAB_URL=http://172.17.0.2\" \\\r\n  -v /opt/gitlab-ci/mysql:/var/lib/mysql sameersbn/gitlab-ci\r\n```\r\n\r\nThis will make sure that the data stored in the database is not lost when the image is stopped and started again.\r\n\r\n#### External MySQL Server\r\nThe image can be configured to use an external MySQL database instead of starting a MySQL server internally. The database configuration should be specified using environment variables while starting the GitLab CI image.\r\n\r\nBefore you start the GitLab CI image create user and database for GitLab CI.\r\n\r\n```bash\r\nmysql -uroot -p\r\nCREATE USER 'gitlab_ci'@'%.%.%.%' IDENTIFIED BY 'password';\r\nCREATE DATABASE IF NOT EXISTS `gitlab_ci_production` DEFAULT CHARACTER SET `utf8` COLLATE `utf8_unicode_ci`;\r\nGRANT SELECT, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER ON `gitlab_ci_production`.* TO 'gitlab_ci'@'%.%.%.%';\r\n```\r\n\r\nTo make sure the database is initialized start the container with **app:rake db:setup** option.\r\n\r\n**NOTE: This should be done only for the first run**.\r\n\r\n*Assuming that the mysql server host is 192.168.1.100*\r\n\r\n```bash\r\ndocker run -name gitlab-ci -i -t -rm \\\r\n  -e \"GITLAB_URL=http://172.17.0.2\" \\\r\n  -e \"DB_HOST=192.168.1.100\" -e \"DB_NAME=gitlab_ci_production\" \\\r\n  -e \"DB_USER=gitlab_ci\" -e \"DB_PASS=password\" \\\r\n  sameersbn/gitlab-ci app:rake db:setup\r\n```\r\n\r\nThis will initialize the GitLab CI database. Now that the database is initialized, start the container normally.\r\n\r\n```bash\r\ndocker run -name gitlab-ci -d \\\r\n  -e \"GITLAB_URL=http://172.17.0.2\" \\\r\n  -e \"DB_HOST=192.168.1.100\" -e \"DB_NAME=gitlab_ci_production\" \\\r\n  -e \"DB_USER=gitlab_ci\" -e \"DB_PASS=password\" \\\r\n  sameersbn/gitlab-ci\r\n```\r\n\r\n### PostgreSQL\r\n\r\n#### External PostgreSQL Server\r\nThe image also supports using an external PostgreSQL Server. This is also controlled via environment variables.\r\n\r\n```bash\r\ncreateuser gitlab_ci\r\ncreatedb -O gitlab_ci gitlab_ci_production\r\n```\r\n\r\nTo make sure the database is initialized start the container with **app:rake db:setup** option.\r\n\r\n**NOTE: This should be done only for the first run**.\r\n\r\n*Assuming that the PostgreSQL server host is 192.168.1.100*\r\n\r\n```bash\r\ndocker run -name gitlab-ci -i -t -rm \\\r\n  -e \"GITLAB_URL=http://172.17.0.2\" \\\r\n  -e \"DB_TYPE=postgres\" -e \"DB_HOST=192.168.1.100\" \\\r\n  -e \"DB_NAME=gitlab_ci_production\" \\\r\n  -e \"DB_USER=gitlab_ci\" -e \"DB_PASS=password\" \\\r\n  sameersbn/gitlab-ci app:rake db:setup\r\n```\r\n\r\nThis will initialize the GitLab CI database. Now that the database is initialized, start the container normally.\r\n\r\n```bash\r\ndocker run -name gitlab-ci -d \\\r\n  -e \"GITLAB_URL=http://172.17.0.2\" \\\r\n  -e \"DB_TYPE=postgres\" -e \"DB_HOST=192.168.1.100\" \\\r\n  -e \"DB_NAME=gitlab_ci_production\" \\\r\n  -e \"DB_USER=gitlab_ci\" -e \"DB_PASS=password\" \\\r\n  sameersbn/gitlab-ci\r\n```\r\n\r\n### Mail\r\nThe mail configuration should be specified using environment variables while starting the GitLab CI image. The configuration defaults to using gmail to send emails and requires the specification of a valid username and password to login to the gmail servers.\r\n\r\nThe following environment variables need to be specified to get mail support to work.\r\n\r\n* SMTP_DOMAIN (defaults to www.gmail.com)\r\n* SMTP_HOST (defaults to smtp.gmail.com)\r\n* SMTP_PORT (defaults to 587)\r\n* SMTP_USER\r\n* SMTP_PASS\r\n* SMTP_STARTTLS (defaults to true)\r\n\r\n```bash\r\ndocker run -name gitlab-ci -d \\\r\n  -e \"SMTP_USER=USER@gmail.com\" -e \"SMTP_PASS=PASSWORD\" \\\r\n  sameersbn/gitlab-ci\r\n```\r\n\r\nIf you are not using google mail, then please configure the  SMTP host and port using the SMTP_HOST and SMTP_PORT configuration parameters.\r\n\r\n__NOTE:__\r\n\r\nI have only tested standard gmail and google apps login. I expect that the currently provided configuration parameters should be sufficient for most users. Please look up the [Available Configuration Parameters](#available-configuration-parameters) section for all available SMTP configuration options.\r\n\r\n### Putting it all together\r\n\r\n```bash\r\ndocker run -name gitlab-ci -d -h gitlab-ci.local.host \\\r\n  -v /opt/gitlab-ci/mysql:/var/lib/mysql \\\r\n  -e \"GITLAB_URL=http://172.17.0.2\" \\\r\n  -e \"GITLAB_CI_HOST=gitlab-ci.local.host\" \\\r\n  -e \"GITLAB_CI_EMAIL=gitlab@local.host\" \\\r\n  -e \"GITLAB_CI_SUPPORT=support@local.host\" \\\r\n  -e \"SMTP_USER=USER@gmail.com\" -e \"SMTP_PASS=PASSWORD\" \\\r\n  sameersbn/gitlab-ci\r\n```\r\n\r\nIf you are using an external mysql database\r\n\r\n```bash\r\ndocker run -name gitlab-ci -d -h gitlab-ci.local.host \\\r\n  -e \"DB_HOST=192.168.1.100\" -e \"DB_NAME=gitlab_ci_production\" \\\r\n  -e \"DB_USER=gitlab_ci\" -e \"DB_PASS=password\" \\\r\n  -e \"GITLAB_URL=http://172.17.0.2\" \\\r\n  -e \"GITLAB_CI_HOST=gitlab-ci.local.host\" \\\r\n  -e \"GITLAB_CI_EMAIL=gitlab@local.host\" \\\r\n  -e \"GITLAB_CI_SUPPORT=support@local.host\" \\\r\n  -e \"SMTP_USER=USER@gmail.com\" -e \"SMTP_PASS=PASSWORD\" \\\r\n  sameersbn/gitlab-ci\r\n```\r\n\r\n### Available Configuration Parameters\r\n\r\nBelow is the complete list of available options that can be used to customize your GitLab CI installation.\r\n\r\n- **GITLAB_URL**: Url of the GitLab server to allow connections from. No defaults. Automatically configured when a GitLab server is linked using docker links feature.\r\n- **GITLAB_CI_HOST**: The hostname of the GitLab CI server. Defaults to localhost.\r\n- **GITLAB_CI_PORT**: The port number of the GitLab CI server. Defaults to 80.\r\n- **GITLAB_CI_EMAIL**: The email address for the GitLab CI server. Defaults to gitlab@localhost.\r\n- **GITLAB_CI_SUPPORT**: The support email address for the GitLab CI server. Defaults to support@localhost.\r\n- **REDIS_HOST**: The hostname of the redis server. Defaults to localhost\r\n- **REDIS_PORT**: The connection port of the redis server. Defaults to 6379.\r\n- **UNICORN_WORKERS**: The number of unicorn workers to start. Defaults to 2.\r\n- **UNICORN_TIMEOUT**: Sets the timeout of unicorn worker processes. Defaults to 60 seconds.\r\n- **DB_TYPE**: The database type. Possible values: mysql, postgres. Defaults to mysql.\r\n- **DB_HOST**: The database server hostname. Defaults to localhost.\r\n- **DB_PORT**: The database server port. Defaults to 3306 for mysql and 5432 for postgresql.\r\n- **DB_NAME**: The database database name. Defaults to gitlab_ci_production\r\n- **DB_USER**: The database database user. Defaults to root\r\n- **DB_PASS**: The database database password. Defaults to no password\r\n- **DB_POOL**: The database database connection pool count. Defaults to 10.\r\n- **SMTP_DOMAIN**: SMTP domain. Defaults to www.gmail.com\r\n- **SMTP_HOST**: SMTP server host. Defaults to smtp.gmail.com.\r\n- **SMTP_PORT**: SMTP server port. Defaults to 587.\r\n- **SMTP_USER**: SMTP username.\r\n- **SMTP_PASS**: SMTP password.\r\n- **SMTP_STARTTLS**: Enable STARTTLS. Defaults to true.\r\n\r\n# Maintenance\r\n\r\n## SSH Login\r\nThere are two methods to gain root login to the container, the first method is to add your public rsa key to the authorized_keys file and build the image.\r\n\r\nThe second method is use the dynamically generated password. Every time the container is started a random password is generated using the pwgen tool and assigned to the root user. This password can be fetched from the docker logs.\r\n\r\n```bash\r\ndocker logs gitlab-ci 2>&1 | grep '^User: ' | tail -n1\r\n```\r\n\r\nThis password is not persistent and changes every time the image is executed.\r\n\r\n# Upgrading\r\n\r\nTo upgrade to newer GitLab CI releases, simply follow this 4 step upgrade procedure.\r\n\r\n- **Step 1**: Stop the currently running image\r\n\r\n```bash\r\ndocker stop gitlab-ci\r\n```\r\n\r\n- **Step 2**: Update the docker image.\r\n\r\n```bash\r\ndocker pull sameersbn/gitlab-ci\r\n```\r\n\r\n- **Step 3**: Migrate the database.\r\n\r\n```bash\r\ndocker run -name gitlab-ci -i -t -rm [OPTIONS] \\\r\n  sameersbn/gitlab-ci app:rake db:migrate\r\n```\r\n\r\n- **Step 4**: Start the image\r\n\r\n```bash\r\ndocker run -name gitlab-ci -d [OPTIONS] sameersbn/gitlab-ci\r\n```\r\n\r\n\r\n## References\r\n  * https://www.gitlab.com/gitlab-ci/\r\n  * https://gitlab.com/gitlab-org/gitlab-ci/blob/master/README.md\r\n","google":"UA-48810494-4","note":"Don't delete this file! It's used internally to help with page regeneration."}